[{"E:\\Front-End-React\\fron-end\\src\\index.js":"1","E:\\Front-End-React\\fron-end\\src\\App.js":"2","E:\\Front-End-React\\fron-end\\src\\reportWebVitals.js":"3","E:\\Front-End-React\\fron-end\\src\\Components\\Headers\\Header.jsx":"4","E:\\Front-End-React\\fron-end\\src\\Components\\RegistrationForm\\RegistrationForm.js":"5","E:\\Front-End-React\\fron-end\\src\\Constant\\apiConstants.js":"6","E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\LoginForm.jsx":"7","E:\\Front-End-React\\fron-end\\src\\Components\\Home\\Home.jsx":"8","E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\Logout.jsx":"9","E:\\Front-End-React\\fron-end\\src\\Components\\ProtectedRouter\\PrivateRoute.jsx":"10","E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\NotFoundPage.jsx":"11","E:\\Front-End-React\\fron-end\\src\\Components\\LandingPage\\LandingPage.jsx":"12","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\MyEditor.jsx":"13","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\Spineer.jsx":"14","E:\\Front-End-React\\fron-end\\src\\Components\\Tags\\Tags.jsx":"15","E:\\Front-End-React\\fron-end\\src\\Components\\Report\\Report.jsx":"16","E:\\Front-End-React\\fron-end\\src\\Components\\Notes\\Notes.jsx":"17","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\ModalEditor.jsx":"18","E:\\Front-End-React\\fron-end\\src\\Components\\Task\\Task.jsx":"19","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\Loading.jsx":"20","E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\settings.jsx":"21","E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\Settings.jsx":"22","E:\\Front-End-React\\fron-end\\src\\Components\\PwdReset\\PwdReset.jsx":"23"},{"size":496,"mtime":1608802675997,"results":"24","hashOfConfig":"25"},{"size":2085,"mtime":1613304244023,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":1043,"mtime":1608893727883,"results":"28","hashOfConfig":"25"},{"size":4653,"mtime":1608802960656,"results":"29","hashOfConfig":"25"},{"size":133,"mtime":1608569807371,"results":"30","hashOfConfig":"25"},{"size":3697,"mtime":1609488370596,"results":"31","hashOfConfig":"25"},{"size":3321,"mtime":1613299674995,"results":"32","hashOfConfig":"25"},{"size":339,"mtime":1608802806565,"results":"33","hashOfConfig":"25"},{"size":468,"mtime":1608802782614,"results":"34","hashOfConfig":"25"},{"size":3082,"mtime":1608822143835,"results":"35","hashOfConfig":"25"},{"size":12273,"mtime":1613297473619,"results":"36","hashOfConfig":"25"},{"size":9244,"mtime":1609483889689,"results":"37","hashOfConfig":"25"},{"size":409,"mtime":1608827272115,"results":"38","hashOfConfig":"25"},{"size":7103,"mtime":1609485048340,"results":"39","hashOfConfig":"25"},{"size":229,"mtime":1608873064140,"results":"40","hashOfConfig":"25"},{"size":7763,"mtime":1609483768442,"results":"41","hashOfConfig":"25"},{"size":1121,"mtime":1609483513624,"results":"42","hashOfConfig":"25"},{"size":8143,"mtime":1609499229875,"results":"43","hashOfConfig":"25"},{"size":430,"mtime":1613297226031,"results":"44","hashOfConfig":"25"},{"size":1690,"mtime":1613304377298,"results":"45","hashOfConfig":"25"},{"size":1690,"mtime":1613304377298,"results":"46","hashOfConfig":"25"},{"size":2936,"mtime":1613304327742,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"g5z3tw",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Front-End-React\\fron-end\\src\\index.js",[],["101","102"],"E:\\Front-End-React\\fron-end\\src\\App.js",["103","104"],"E:\\Front-End-React\\fron-end\\src\\reportWebVitals.js",[],"E:\\Front-End-React\\fron-end\\src\\Components\\Headers\\Header.jsx",["105","106","107","108"],"import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './Header.css'\r\nimport logout from '../svg/logout.svg'\r\nimport settings from '../svg/settings.svg'\r\nimport search from '../svg/search.svg'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n\r\nfunction Header(props) {\r\n    const location = useLocation();\r\n    console.log(\"test\",location.pathname);\r\n\r\n    return (\r\n        <div className=\"header-NonLandingPage\">\r\n            <a href=\"#default\" className=\"square\"></a>\r\n            <div className=\"header-right\">\r\n            <NavLink className=\"nav-link\" to=\"/home\">\r\n                    <img src={search}></img>\r\n                </NavLink>\r\n                \r\n                <NavLink className=\"nav-link\" to=\"/settings\">\r\n                    <img src={settings}></img>\r\n                </NavLink>\r\n                <NavLink className=\"nav-link\" to=\"/logout\">\r\n                    <img src={logout}></img>\r\n                </NavLink>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default Header;","E:\\Front-End-React\\fron-end\\src\\Components\\RegistrationForm\\RegistrationForm.js",[],"E:\\Front-End-React\\fron-end\\src\\Constant\\apiConstants.js",[],"E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\LoginForm.jsx",["109"],"\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport './LoginForm.css';\r\nimport {API_BASE_URL, ACCESS_TOKEN_NAME} from '../../Constant/apiConstants';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\n\r\n\r\nexport class LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email : \"\",\r\n            password : \"\",\r\n            successMessage: null,\r\n            \r\n        };\r\n    }\r\n    handleChange = (e) => {\r\n        const {id , value} = e.target   \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [id] : value\r\n        }))\r\n    }\r\n    handleSubmitClick = (e) => {\r\n        var self=this;\r\n        this.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n        e.preventDefault();\r\n        const payload={\r\n            \"email\":this.state.email,\r\n            \"password\":this.state.password,\r\n        }\r\n        axios.post(API_BASE_URL+'/auth/login', payload)\r\n            .then(function (response) {\r\n                if(!('error' in response.data)){\r\n                    NotificationManager.success(\"Login sucessfull.\", 'info');\r\n                    localStorage.setItem(ACCESS_TOKEN_NAME,response.data.access_token);\r\n                    window.location = \"/home\"                 \r\n                } else{  \r\n                    self.setState({\r\n                        successMessage: \"\",\r\n                    });                  \r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                    this.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n                    \r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            }); \r\n       \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"card-body login_container\">\r\n            <form>\r\n                <div className=\"form-group text-left\">\r\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                <input type=\"email\" \r\n                       className=\"form-control\" \r\n                       id=\"email\" \r\n                       aria-describedby=\"emailHelp\" \r\n                       placeholder=\"Enter email\" \r\n                       value={this.state.email}\r\n                       onChange={this.handleChange}\r\n                />\r\n                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group text-left\">\r\n                <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                <input type=\"password\" \r\n                       className=\"form-control\" \r\n                       id=\"password\" \r\n                       placeholder=\"Password\"\r\n                       value={this.state.password}\r\n                       onChange={this.handleChange} \r\n                />\r\n                </div>\r\n                <div className=\"form-check\">\r\n                </div>\r\n                <button id=\"login_id\"\r\n                    type=\"submit\" \r\n                    className=\"btn\"\r\n                    onClick={this.handleSubmitClick}\r\n                >Login</button>\r\n            </form>\r\n            <div className=\"alert alert-success mt-2\" style={{display: this.state.successMessage ? 'block' : 'none' }} role=\"alert\">\r\n                {this.state.successMessage}\r\n            </div>\r\n            \r\n            <NotificationContainer/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm","E:\\Front-End-React\\fron-end\\src\\Components\\Home\\Home.jsx",["110","111","112","113","114","115","116","117","118"],"E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\Logout.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\ProtectedRouter\\PrivateRoute.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\NotFoundPage.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\LandingPage\\LandingPage.jsx",["119","120","121","122"],"E:\\Front-End-React\\fron-end\\src\\Components\\Common\\MyEditor.jsx",["123","124"],"import React from 'react';\r\nimport { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js'\r\nimport './editorStyles.css'\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../Constant/apiConstants';\r\nimport axios from 'axios';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport default class MyEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characterCounter: 0,\r\n    };\r\n    if (props.content) {\r\n      console.log(\"content :\", props.content);\r\n      this.state.editorState = EditorState.createWithContent(convertFromRaw(JSON.parse(props.content)));\r\n    } else {\r\n      this.state.editorState = EditorState.createEmpty();\r\n    }\r\n    if (props.note_id) {\r\n      // used for record update\r\n      this.state.id = props.note_id;\r\n    }\r\n\r\n    this.focus = () => this.refs.editor.focus();\r\n    this.onChange = (editorState) => {\r\n      this.setState({ editorState });\r\n      let detail = this.state.editorState.getCurrentContent().getPlainText();\r\n\r\n      const charCount = detail.length;\r\n      const charLeft = 245 - charCount;\r\n      if (charLeft > -1) {\r\n        this.setState({\r\n          detail: detail,\r\n          characterCounter: charLeft,\r\n          content: this.renderContentAsRawJs(),\r\n        });\r\n      }\r\n    };\r\n\r\n    this.handleKeyCommand = (command) => this._handleKeyCommand(command);\r\n    this.onTab = (e) => this._onTab(e);\r\n    this.toggleBlockType = (type) => this._toggleBlockType(type);\r\n    this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\r\n  }\r\n  getSavedEditorData() {\r\n    const savedData = localStorage.getItem('editorData');\r\n    return savedData ? JSON.parse(savedData) : null;\r\n  }\r\n  apiInvokeupdateNote = (id) => {\r\n    var self = this;\r\n    if (this.state.detail) {\r\n\r\n      const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      };\r\n      const payload = {\r\n        \"detail\": this.state.detail,\r\n        \"content\": this.state.content,\r\n        \"id\": this.state.id\r\n      }\r\n\r\n      axios.put(API_BASE_URL + '/note/', payload, config)\r\n        .then(function (response) {\r\n          console.log(response.data);\r\n          if (!('error' in response.data)) {\r\n            NotificationManager.info('Note updated.', 'info');\r\n            \r\n\r\n          } else {\r\n            NotificationManager.warning(response.data['error'], 'info');\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n    else {\r\n      NotificationManager.warning(\"Detail cant be blank.\", 'info');\r\n    }\r\n\r\n  }\r\n\r\n  apiInvokeAddNote = () => {\r\n    var self = this;\r\n    if (this.state.detail) {\r\n\r\n      const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      };\r\n      const payload = {\r\n        \"detail\": this.state.detail,\r\n        \"content\": this.state.content,\r\n        \"tag_id\": this.props.selectedTag\r\n      }\r\n\r\n      axios.post(API_BASE_URL + '/note/', payload, config)\r\n        .then(function (response) {\r\n          console.log(response.data);\r\n          if (!('error' in response.data)) {\r\n            self.setState({\r\n              editorState: EditorState.createEmpty(),\r\n            });\r\n\r\n            self.props.getAllNotes();\r\n            NotificationManager.info('Note created.', 'info');\r\n\r\n\r\n          } else {\r\n            NotificationManager.warning(response.data['error'], 'info');\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n    else {\r\n      NotificationManager.warning(\"Detail cant be blank.\", 'info');\r\n    }\r\n\r\n  }\r\n\r\n\r\n  renderContentAsRawJs() {\r\n    const contentState = this.state.editorState.getCurrentContent();\r\n    const raw = convertToRaw(contentState);\r\n\r\n    return JSON.stringify(raw, null, 2);\r\n  }\r\n\r\n  _handleKeyCommand(command) {\r\n    const { editorState } = this.state;\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  _onTab(e) {\r\n    const maxDepth = 4;\r\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\r\n  }\r\n\r\n  _toggleBlockType(blockType) {\r\n    this.onChange(\r\n      RichUtils.toggleBlockType(\r\n        this.state.editorState,\r\n        blockType\r\n      )\r\n    );\r\n  }\r\n\r\n  _toggleInlineStyle(inlineStyle) {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(\r\n        this.state.editorState,\r\n        inlineStyle\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { editorState } = this.state;\r\n\r\n    // If the user changes block type before entering any text, we can\r\n    // either style the placeholder or hide it. Let's just hide it now.\r\n    let className = 'RichEditor-editor';\r\n    var contentState = editorState.getCurrentContent();\r\n    if (!contentState.hasText()) {\r\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n        className += ' RichEditor-hidePlaceholder';\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"RichEditor-root\">\r\n          <BlockStyleControls\r\n            editorState={editorState}\r\n            onToggle={this.toggleBlockType}\r\n          />\r\n          <InlineStyleControls\r\n            editorState={editorState}\r\n            onToggle={this.toggleInlineStyle}\r\n          />\r\n          <div className={className} onClick={this.focus}>\r\n            <Editor\r\n              blockStyleFn={getBlockStyle}\r\n              customStyleMap={styleMap}\r\n              editorState={editorState}\r\n              handleKeyCommand={this.handleKeyCommand}\r\n              onChange={this.onChange}\r\n              onTab={this.onTab}\r\n              placeholder=\"write a note...\"\r\n              ref=\"editor\"\r\n              spellCheck={true}\r\n            />\r\n            <pre>Remianing Words:{this.state.characterCounter}</pre>\r\n            <div className=\"row\">\r\n              {!this.props.isupdate && <div class=\"col\">\r\n                <button\r\n                  className=\"btn float-right mr-2 mt-3\"\r\n                  onClick={this.apiInvokeAddNote}>Add</button>\r\n              </div>}\r\n              {this.props.isupdate && <div class=\"col\">\r\n                <button\r\n                  className=\"btn float-right mr-2 mt-3\"\r\n                  onClick={() => this.apiInvokeupdateNote()}>Update</button>\r\n              </div>}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n  CODE: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2,\r\n  },\r\n};\r\n\r\nfunction getBlockStyle(block) {\r\n  switch (block.getType()) {\r\n    case 'blockquote': return 'RichEditor-blockquote';\r\n    default: return null;\r\n  }\r\n}\r\n\r\nclass StyleButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.onToggle = (e) => {\r\n      e.preventDefault();\r\n      this.props.onToggle(this.props.style);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let className = 'RichEditor-styleButton';\r\n    if (this.props.active) {\r\n      className += ' RichEditor-activeButton';\r\n    }\r\n\r\n    return (\r\n      <span className={className} onMouseDown={this.onToggle}>\r\n        {this.props.label}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nconst BLOCK_TYPES = [\r\n  { label: 'H1', style: 'header-one' },\r\n  { label: 'H2', style: 'header-two' },\r\n  { label: 'H3', style: 'header-three' },\r\n  { label: 'H4', style: 'header-four' },\r\n  { label: 'H5', style: 'header-five' },\r\n  { label: 'H6', style: 'header-six' },\r\n  { label: 'Blockquote', style: 'blockquote' },\r\n  { label: 'UL', style: 'unordered-list-item' },\r\n  { label: 'OL', style: 'ordered-list-item' },\r\n  { label: 'Code Block', style: 'code-block' },\r\n];\r\n\r\nconst BlockStyleControls = (props) => {\r\n  const { editorState } = props;\r\n  const selection = editorState.getSelection();\r\n  const blockType = editorState\r\n    .getCurrentContent()\r\n    .getBlockForKey(selection.getStartKey())\r\n    .getType();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {BLOCK_TYPES.map((type) =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={type.style === blockType}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nvar INLINE_STYLES = [\r\n  { label: 'B', style: 'BOLD' },\r\n  { label: 'I', style: 'ITALIC' },\r\n  { label: 'U', style: 'UNDERLINE' },\r\n  { label: 'Code', style: 'CODE' },\r\n];\r\n\r\nconst InlineStyleControls = (props) => {\r\n  var currentStyle = props.editorState.getCurrentInlineStyle();\r\n  return (\r\n    <div>\r\n      <div className=\"RichEditor-controls\">\r\n        {INLINE_STYLES.map(type =>\r\n          <StyleButton\r\n            key={type.label}\r\n            active={currentStyle.has(type.style)}\r\n            label={type.label}\r\n            onToggle={props.onToggle}\r\n            style={type.style}\r\n          />\r\n\r\n        )}\r\n\r\n      </div>\r\n \r\n    </div>\r\n  );\r\n};","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\Spineer.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\Tags\\Tags.jsx",["125","126","127","128","129","130","131","132"],"import React, { Component } from 'react'\r\nimport add from '../svg/add.svg'\r\nimport home from '../svg/home.svg'\r\nimport trash from '../svg/trash.svg'\r\nimport edit from '../svg/edit.svg'\r\nimport './Tags.css'\r\nimport axios from 'axios';\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../Constant/apiConstants';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Moment from 'react-moment';\r\n\r\nMoment.globalFormat = 'D MMM YYYY';\r\n\r\nexport class Tags extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            table: true,\r\n            add: false,\r\n            tagValue: '',\r\n            tableRow: [],\r\n        };\r\n        this.getAllTag();\r\n    }\r\n    \r\n\r\n    addIconClicked = () => {\r\n        this.setState({\r\n            add: true,\r\n            table: false,\r\n        });\r\n    }\r\n    tagOnChane = (e) => {\r\n        this.setState({\r\n            tagValue: e.target.value\r\n        });\r\n    }\r\n    homeIconClicked = () => {\r\n        this.getAllTag();\r\n        this.setState({\r\n            add: false,\r\n            table: true,\r\n        });\r\n    }\r\n    getAllTag = () => {\r\n        var self = this;\r\n        self.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        axios.get(API_BASE_URL + '/tags/', config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    console.table(response.data['tags']);\r\n                    self.setState({\r\n                        tableRow: response.data['tags']\r\n                    });\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    addTag = (e) => {\r\n        var self = this;\r\n        self.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n\r\n        e.preventDefault();\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        const payload = {\r\n            \"name\": this.state.tagValue\r\n        }\r\n        console.table(payload);\r\n        axios.post(API_BASE_URL + '/tags/', payload, config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    self.setState({\r\n                        tagValue: \"\"\r\n                    });\r\n                    NotificationManager.success(\"Tag added.\", 'info');\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    deleteTag(id){\r\n        // Delete Tag\r\n        var self = this;\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        axios.delete(API_BASE_URL + `/tags/?id=${id}`, config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    NotificationManager.success(\"Tag deleted.\", 'info');    \r\n                                  \r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Tags</h4>\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <a className={this.state.table ? \"btn TagsactiveIcon\" : \"btn\"} onClick={this.homeIconClicked}>\r\n                            <img className=\"Tagsicon\" src={home}></img>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <a className={this.state.add ? \"btn TagsactiveIcon\" : \"btn\"} onClick={this.addIconClicked}>\r\n                            <img className=\"Tagsicon\" src={add}></img>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                {this.state.add && <div className=\"row\">\r\n                    <div className=\"col-4 col-md-4 offset-md-4 form-group\">\r\n                        <label>Tag</label>\r\n                        <input value={this.state.tagValue} onChange={this.tagOnChane} className=\"form-control\" />\r\n                        <div className=\"row\">\r\n                            <div class=\"col\">\r\n                                <button\r\n                                    className=\"btn float-right mr-2 mt-3\"\r\n                                    onClick={this.addTag}>Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n                {this.state.table && <div>\r\n                    <table class=\"table\">\r\n                        <thead class=\"thead-light\">\r\n                            <tr>\r\n                                <th scope=\"col\">#Id</th>\r\n                                <th scope=\"col\">Tag</th>\r\n                                <th scope=\"col\">Created</th>\r\n                                <th scope=\"col\">Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <React.Fragment>\r\n                                {this.state.tableRow.map(row => (\r\n                                    <tr key={row.id}>\r\n                                        <td>{row.id}</td>\r\n                                        <td>{row.name}</td>\r\n                                        <td>\r\n                                            <Moment unix>\r\n                                                {row.created_ts}\r\n                                            </Moment>\r\n                                        </td>\r\n                                        <td>\r\n                                            \r\n                                            <a className={this.state.table ? \"btn TagsactiveIcon\" : \"btn\"} onClick={()=>this.deleteTag(row.id)}>\r\n                                                <img className=\"Tagsicon\" src={trash}></img>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </React.Fragment>\r\n                        </tbody>\r\n                    </table>\r\n                </div>}\r\n                <NotificationContainer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tags\r\n","E:\\Front-End-React\\fron-end\\src\\Components\\Report\\Report.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\Notes\\Notes.jsx",["133","134","135","136"],"import React, { Component } from 'react'\r\nimport Select from 'react-select';\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../Constant/apiConstants';\r\nimport axios from 'axios';\r\n\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport MyEditor from '../Common/MyEditor'\r\nimport Moment from 'react-moment';\r\nimport trash from '../svg/trash.svg'\r\nimport edit from '../svg/edit.svg'\r\nimport './Notes.css'\r\nimport ModalEditor from '../Common/ModalEditor';\r\n\r\nexport class Notes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            content: '',\r\n            selectedOption: null,\r\n            noteRow: [],\r\n            open: false,\r\n            dialogbody: '',\r\n\r\n        };\r\n\r\n\r\n        this.togglePopup = this.togglePopup.bind(this);\r\n    }\r\n\r\n    notification_svc = (msg) => {\r\n        NotificationManager.warning(msg, 'info');\r\n    }\r\n\r\n    getAllNotes = () => {\r\n        var self = this;\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        const tag_id = self.state.selectedOption.value;\r\n        axios.get(API_BASE_URL + `/note/tag?tag_id=${tag_id}`, config)\r\n            .then(function (response) {\r\n\r\n                if (!('error' in response.data)) {\r\n\r\n                    self.setState({\r\n                        noteRow: response.data['notes']\r\n                    });\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    getAllTag = () => {\r\n        var self = this;\r\n        self.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        axios.get(API_BASE_URL + '/tags/', config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n\r\n                    let data = response.data['tags']\r\n                    let options = data.map(x => ({ 'value': x['id'], 'label': x['name'] }));\r\n                    self.setState({\r\n                        options: options\r\n                    });\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    togglePopup(content, id) {\r\n        if (id) {\r\n            this.setState({\r\n                open: !this.state.open,\r\n                dialogbody: content,\r\n                dialogbodyid: id\r\n            });\r\n        }\r\n        else {\r\n\r\n            this.setState({\r\n                open: !this.state.open\r\n\r\n            });\r\n            this.getAllNotes();\r\n\r\n\r\n        }\r\n    }\r\n\r\n        deleteNote = (id) => {\r\n            var self = this;\r\n            self.setState({\r\n                successMessage: \"Loading...\",\r\n            });\r\n\r\n            const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n            const config = {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            };\r\n\r\n            axios.delete(API_BASE_URL + `/note/?id=${id}`, config)\r\n                .then(function (response) {\r\n                    if (!('error' in response.data)) {\r\n                        self.getAllNotes();\r\n                        NotificationManager.warning('Note deleted.', 'info');\r\n                    } else {\r\n                        NotificationManager.warning(response.data['error'], 'info');\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n\r\n        handleChange = selectedOption => {\r\n            this.setState(\r\n                { selectedOption },\r\n                () => this.getAllNotes()\r\n            );\r\n\r\n        };\r\n        componentWillMount() {\r\n\r\n            this.getAllTag();\r\n        }\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <h5>Select Tag:</h5>\r\n                    <Select autoFocus isSearchable\r\n                        placeholder='Select Tag...'\r\n                        value={this.state.selectedOption}\r\n                        onChange={this.handleChange}\r\n                        options={this.state.options}\r\n                    />\r\n                    <hr />\r\n                    { this.state.selectedOption && <div>\r\n                        <h5>Add Note:</h5>\r\n\r\n                        <MyEditor\r\n                            textAreaUpdate={this.textAreaUpdate}\r\n                            selectedTag={this.state.selectedOption.value}\r\n                            notification_svc={this.state.notification_svc}\r\n                            getAllNotes={this.getAllNotes}\r\n                        />\r\n\r\n                        <hr></hr>\r\n                        <table class=\"table\">\r\n                            <thead class=\"thead-light\">\r\n                                <tr class=\"d-flex\">\r\n                                    <th scope=\"col\" class=\"col-1\">#Id</th>\r\n                                    <th scope=\"col\" class=\"col-7\">Detail</th>\r\n                                    <th scope=\"col\" class=\"col-2\">Created</th>\r\n                                    <th scope=\"col\" class=\"col-2\">Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <React.Fragment>\r\n                                    {this.state.noteRow.map(row => (\r\n                                        <tr key={row.id} class=\"d-flex\">\r\n                                            <td class=\"col-1\">{row.id}</td>\r\n                                            <td class=\"col-7\">{row.detail}</td>\r\n                                            <td class=\"col-2\">\r\n                                                <Moment unix>\r\n                                                    {row.created_ts}\r\n                                                </Moment>\r\n                                            </td>\r\n                                            <td class=\"col-2\">\r\n                                                <a classNamed={this.state.noteRow ? \"btn TagsactiveIcon\" : \"btn\"} onClick={() => this.deleteNote(row.id)}>\r\n                                                    <img className=\"Tagsicon\" src={trash}></img>\r\n                                                </a>\r\n                                                <a className={this.state.noteRow ? \"btn TagsactiveIcon\" : \"btn\"} onClick={() => this.togglePopup(row.content, row.id)}>\r\n                                                    <img className=\"Tagsicon\" src={edit}></img>\r\n                                                </a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </React.Fragment>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>}\r\n                    <NotificationContainer />\r\n                    {this.state.open && <ModalEditor show={this.state.open} body={this.state.dialogbody} note_id={this.state.dialogbodyid} refresh_record={this.getAllNotes} parentAction={() => this.togglePopup('', '')}></ModalEditor>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default Notes\r\n","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\ModalEditor.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\Task\\Task.jsx",["137","138","139","140","141","142","143","144","145"],"import React, { Component } from 'react'\r\nimport add from '../svg/add.svg'\r\nimport home from '../svg/home.svg'\r\nimport trash from '../svg/trash.svg'\r\nimport edit from '../svg/edit.svg'\r\nimport task_done from '../svg/task_done.svg'\r\nimport Moment from 'react-moment';\r\nimport axios from 'axios';\r\nimport './Task.css'\r\nimport { ACCESS_TOKEN_NAME, API_BASE_URL } from '../../Constant/apiConstants';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\n\r\nexport class Task extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            table: true,\r\n            add: false,\r\n            tableRow: [],\r\n            detail:'',\r\n        };\r\n        this.getAllTask();\r\n       \r\n    }\r\n    addIconClicked = () => {\r\n        this.setState({\r\n            add: true,\r\n            table: false,\r\n        });\r\n    }\r\n    homeIconClicked = () => {\r\n        this.getAllTask();\r\n        this.setState({\r\n            add: false,\r\n            table: true,\r\n        });\r\n    }\r\n    taskOnChange = (e) => {\r\n        this.setState({\r\n            detail: e.target.value\r\n        });\r\n    }\r\n    getAllTask = () => {\r\n        var self = this;\r\n        self.setState({\r\n            successMessage: \"Loading...\",\r\n        });\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        axios.get(API_BASE_URL + '/todo/', config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    console.table(response.data['todos']);\r\n                    self.setState({\r\n                        tableRow: response.data['todos']\r\n                    });\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    deleteTag(id){\r\n        // Delete Tag\r\n        var self = this;\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n        axios.delete(API_BASE_URL + `/todo/?id=${id}`, config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    self.getAllTask();\r\n                    NotificationManager.success(\"Task deleted.\", 'info');   \r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    updateTodo = (id) => {\r\n        var self = this;\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        const payload = {\r\n            \"done_flag\": true,\r\n            \"id\":id\r\n        }\r\n        console.table(payload);\r\n        axios.put(API_BASE_URL + '/todo/', payload, config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    self.getAllTask();\r\n                    NotificationManager.success(\"Task added.\", 'info');\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    addTodo = () => {\r\n        var self = this;\r\n\r\n        const token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        };\r\n\r\n        const payload = {\r\n            \"detail\": this.state.detail\r\n        }\r\n        console.table(payload);\r\n        axios.post(API_BASE_URL + '/todo/', payload, config)\r\n            .then(function (response) {\r\n                if (!('error' in response.data)) {\r\n                    self.setState({\r\n                        detail: \"\"\r\n                    });\r\n                    NotificationManager.success(\"Task added.\", 'info');\r\n\r\n                } else {\r\n                    NotificationManager.warning(response.data['error'], 'info');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Todo</h4>\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <a className={this.state.table ? \"btn TagsactiveIcon\" : \"btn\"} onClick={this.homeIconClicked}>\r\n                            <img className=\"Tagsicon\" src={home}></img>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <a className={this.state.add ? \"btn TagsactiveIcon\" : \"btn\"} onClick={this.addIconClicked}>\r\n                            <img className=\"Tagsicon\" src={add}></img>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                {this.state.add && <div className=\"row\">\r\n                    <div className=\"col-4 col-md-4 offset-md-4 form-group\">\r\n                        <label>Add Todo</label>\r\n                        <input value={this.state.detail} onChange={this.taskOnChange} className=\"form-control\" />\r\n                        <div className=\"row\">\r\n                            <div class=\"col\">\r\n                                <button\r\n                                    className=\"btn float-right mr-2 mt-3\"\r\n                                    onClick={this.addTodo}>Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n                {this.state.table && <div>\r\n                    <table class=\"table\">\r\n                        <thead class=\"thead-light\">\r\n                            <tr>\r\n                                <th scope=\"col\">#Id</th>\r\n                                <th scope=\"col\">Todo</th>\r\n                                <th scope=\"col\">Created</th>\r\n                                <th scope=\"col\">Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <React.Fragment>\r\n                                {this.state.tableRow.map(row => (\r\n                                    <tr key={row.id}>\r\n                                        <td>{row.id}</td>\r\n                                        <td>{row.detail}</td>\r\n                                        <td>\r\n                                            <Moment unix>\r\n                                                {row.created_ts}\r\n                                            </Moment>\r\n                                        </td>\r\n                                        <td>\r\n                                            \r\n                                            <a className={this.state.table ? \"btn \" : \"btn\"} onClick={()=>this.deleteTag(row.id)}>\r\n                                                <img className=\"Tagsicon\" src={trash}></img>\r\n                                            </a>\r\n                                            <a className={this.state.table ? \"btn TagsactiveIcon\" : \"btn\"} onClick={()=>this.updateTodo(row.id)}>\r\n                                                <img className=\"Tagsicon\" src={task_done}></img>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </React.Fragment>\r\n                        </tbody>\r\n                    </table>\r\n                </div>}\r\n                <NotificationContainer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task\r\n","E:\\Front-End-React\\fron-end\\src\\Components\\Common\\Loading.jsx",[],"E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\settings.jsx",["146","147"],"E:\\Front-End-React\\fron-end\\src\\Components\\LoginForm\\Settings.jsx",["148","149","150"],"E:\\Front-End-React\\fron-end\\src\\Components\\PwdReset\\PwdReset.jsx",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":23,"column":10,"nodeType":"157","messageId":"158","endLine":23,"endColumn":15},{"ruleId":"155","severity":1,"message":"159","line":24,"column":10,"nodeType":"157","messageId":"158","endLine":24,"endColumn":22},{"ruleId":"160","severity":1,"message":"161","line":16,"column":13,"nodeType":"162","endLine":16,"endColumn":51},{"ruleId":"163","severity":1,"message":"164","line":19,"column":21,"nodeType":"162","endLine":19,"endColumn":39},{"ruleId":"163","severity":1,"message":"164","line":23,"column":21,"nodeType":"162","endLine":23,"endColumn":41},{"ruleId":"163","severity":1,"message":"164","line":26,"column":21,"nodeType":"162","endLine":26,"endColumn":39},{"ruleId":"155","severity":1,"message":"165","line":6,"column":10,"nodeType":"157","messageId":"158","endLine":6,"endColumn":20},{"ruleId":"155","severity":1,"message":"166","line":10,"column":8,"nodeType":"157","messageId":"158","endLine":10,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":68,"column":29,"nodeType":"162","endLine":68,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":69,"column":33,"nodeType":"162","endLine":69,"endColumn":66},{"ruleId":"167","severity":1,"message":"168","line":71,"column":29,"nodeType":"162","endLine":71,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":72,"column":33,"nodeType":"162","endLine":72,"endColumn":65},{"ruleId":"167","severity":1,"message":"168","line":74,"column":29,"nodeType":"162","endLine":74,"endColumn":122},{"ruleId":"163","severity":1,"message":"164","line":75,"column":33,"nodeType":"162","endLine":75,"endColumn":68},{"ruleId":"167","severity":1,"message":"168","line":77,"column":29,"nodeType":"162","endLine":77,"endColumn":118},{"ruleId":"163","severity":1,"message":"164","line":78,"column":33,"nodeType":"162","endLine":78,"endColumn":66},{"ruleId":"155","severity":1,"message":"169","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":43,"column":21,"nodeType":"162","endLine":43,"endColumn":59},{"ruleId":"167","severity":1,"message":"168","line":45,"column":25,"nodeType":"162","endLine":45,"endColumn":116},{"ruleId":"167","severity":1,"message":"168","line":46,"column":25,"nodeType":"162","endLine":46,"endColumn":109},{"ruleId":"155","severity":1,"message":"170","line":4,"column":10,"nodeType":"157","messageId":"158","endLine":4,"endColumn":31},{"ruleId":"155","severity":1,"message":"171","line":52,"column":9,"nodeType":"157","messageId":"158","endLine":52,"endColumn":13},{"ruleId":"155","severity":1,"message":"172","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":12},{"ruleId":"155","severity":1,"message":"171","line":110,"column":13,"nodeType":"157","messageId":"158","endLine":110,"endColumn":17},{"ruleId":"167","severity":1,"message":"168","line":140,"column":25,"nodeType":"162","endLine":140,"endColumn":119},{"ruleId":"163","severity":1,"message":"164","line":141,"column":29,"nodeType":"162","endLine":141,"endColumn":66},{"ruleId":"167","severity":1,"message":"168","line":145,"column":25,"nodeType":"162","endLine":145,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":146,"column":29,"nodeType":"162","endLine":146,"endColumn":65},{"ruleId":"167","severity":1,"message":"168","line":186,"column":45,"nodeType":"162","endLine":186,"endColumn":145},{"ruleId":"163","severity":1,"message":"164","line":187,"column":49,"nodeType":"162","endLine":187,"endColumn":87},{"ruleId":"167","severity":1,"message":"168","line":191,"column":49,"nodeType":"162","endLine":191,"endColumn":155},{"ruleId":"163","severity":1,"message":"164","line":192,"column":53,"nodeType":"162","endLine":192,"endColumn":91},{"ruleId":"167","severity":1,"message":"168","line":194,"column":49,"nodeType":"162","endLine":194,"endColumn":168},{"ruleId":"163","severity":1,"message":"164","line":195,"column":53,"nodeType":"162","endLine":195,"endColumn":90},{"ruleId":"155","severity":1,"message":"172","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":12},{"ruleId":"167","severity":1,"message":"168","line":159,"column":25,"nodeType":"162","endLine":159,"endColumn":119},{"ruleId":"163","severity":1,"message":"164","line":160,"column":29,"nodeType":"162","endLine":160,"endColumn":66},{"ruleId":"167","severity":1,"message":"168","line":164,"column":25,"nodeType":"162","endLine":164,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":165,"column":29,"nodeType":"162","endLine":165,"endColumn":65},{"ruleId":"167","severity":1,"message":"168","line":205,"column":45,"nodeType":"162","endLine":205,"endColumn":131},{"ruleId":"163","severity":1,"message":"164","line":206,"column":49,"nodeType":"162","endLine":206,"endColumn":87},{"ruleId":"167","severity":1,"message":"168","line":208,"column":45,"nodeType":"162","endLine":208,"endColumn":146},{"ruleId":"163","severity":1,"message":"164","line":209,"column":49,"nodeType":"162","endLine":209,"endColumn":91},{"ruleId":"167","severity":1,"message":"168","line":36,"column":29,"nodeType":"162","endLine":36,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":37,"column":33,"nodeType":"162","endLine":37,"endColumn":66},{"ruleId":"155","severity":1,"message":"173","line":8,"column":33,"nodeType":"157","messageId":"158","endLine":8,"endColumn":52},{"ruleId":"167","severity":1,"message":"168","line":39,"column":29,"nodeType":"162","endLine":39,"endColumn":116},{"ruleId":"163","severity":1,"message":"164","line":40,"column":33,"nodeType":"162","endLine":40,"endColumn":67},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'title' is assigned a value but never used.","Identifier","unusedVar","'errorMessage' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'withRouter' is defined but never used.","'Select' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Spinner' is defined but never used.","'NotificationContainer' is defined but never used.","'self' is assigned a value but never used.","'edit' is defined but never used.","'NotificationManager' is defined but never used.","no-global-assign","no-unsafe-negation"]